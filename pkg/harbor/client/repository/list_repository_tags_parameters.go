// Code generated by go-swagger; DO NOT EDIT.

package repository

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"
)

// NewListRepositoryTagsParams creates a new ListRepositoryTagsParams object
// with the default values initialized.
func NewListRepositoryTagsParams() *ListRepositoryTagsParams {
	var ()
	return &ListRepositoryTagsParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewListRepositoryTagsParamsWithTimeout creates a new ListRepositoryTagsParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewListRepositoryTagsParamsWithTimeout(timeout time.Duration) *ListRepositoryTagsParams {
	var ()
	return &ListRepositoryTagsParams{

		timeout: timeout,
	}
}

// NewListRepositoryTagsParamsWithContext creates a new ListRepositoryTagsParams object
// with the default values initialized, and the ability to set a context for a request
func NewListRepositoryTagsParamsWithContext(ctx context.Context) *ListRepositoryTagsParams {
	var ()
	return &ListRepositoryTagsParams{

		Context: ctx,
	}
}

// NewListRepositoryTagsParamsWithHTTPClient creates a new ListRepositoryTagsParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewListRepositoryTagsParamsWithHTTPClient(client *http.Client) *ListRepositoryTagsParams {
	var ()
	return &ListRepositoryTagsParams{
		HTTPClient: client,
	}
}

/*ListRepositoryTagsParams contains all the parameters to send to the API endpoint
for the list repository tags operation typically these are written to a http.Request
*/
type ListRepositoryTagsParams struct {

	/*LabelIds
	  A list of comma separated label IDs.

	*/
	LabelIds *string
	/*ProjectName
	  Relevant project name.

	*/
	ProjectName string
	/*RepositoryName
	  Relevant repository name.

	*/
	RepositoryName string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the list repository tags params
func (o *ListRepositoryTagsParams) WithTimeout(timeout time.Duration) *ListRepositoryTagsParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the list repository tags params
func (o *ListRepositoryTagsParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the list repository tags params
func (o *ListRepositoryTagsParams) WithContext(ctx context.Context) *ListRepositoryTagsParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the list repository tags params
func (o *ListRepositoryTagsParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the list repository tags params
func (o *ListRepositoryTagsParams) WithHTTPClient(client *http.Client) *ListRepositoryTagsParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the list repository tags params
func (o *ListRepositoryTagsParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithLabelIds adds the labelIds to the list repository tags params
func (o *ListRepositoryTagsParams) WithLabelIds(labelIds *string) *ListRepositoryTagsParams {
	o.SetLabelIds(labelIds)
	return o
}

// SetLabelIds adds the labelIds to the list repository tags params
func (o *ListRepositoryTagsParams) SetLabelIds(labelIds *string) {
	o.LabelIds = labelIds
}

// WithProjectName adds the projectName to the list repository tags params
func (o *ListRepositoryTagsParams) WithProjectName(projectName string) *ListRepositoryTagsParams {
	o.SetProjectName(projectName)
	return o
}

// SetProjectName adds the projectName to the list repository tags params
func (o *ListRepositoryTagsParams) SetProjectName(projectName string) {
	o.ProjectName = projectName
}

// WithRepositoryName adds the repositoryName to the list repository tags params
func (o *ListRepositoryTagsParams) WithRepositoryName(repositoryName string) *ListRepositoryTagsParams {
	o.SetRepositoryName(repositoryName)
	return o
}

// SetRepositoryName adds the repositoryName to the list repository tags params
func (o *ListRepositoryTagsParams) SetRepositoryName(repositoryName string) {
	o.RepositoryName = repositoryName
}

// WriteToRequest writes these params to a swagger request
func (o *ListRepositoryTagsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.LabelIds != nil {

		// query param label_ids
		var qrLabelIds string
		if o.LabelIds != nil {
			qrLabelIds = *o.LabelIds
		}
		qLabelIds := qrLabelIds
		if qLabelIds != "" {
			if err := r.SetQueryParam("label_ids", qLabelIds); err != nil {
				return err
			}
		}

	}

	// path param project_name
	if err := r.SetPathParam("project_name", o.ProjectName); err != nil {
		return err
	}

	// path param repository_name
	if err := r.SetPathParam("repository_name", o.RepositoryName); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
