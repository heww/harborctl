// Code generated by go-swagger; DO NOT EDIT.

package repository

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/heww/harborctl/pkg/harbor/models"
)

// ListRepositoriesReader is a Reader for the ListRepositories structure.
type ListRepositoriesReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ListRepositoriesReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewListRepositoriesOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewListRepositoriesBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 403:
		result := NewListRepositoriesForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewListRepositoriesNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 500:
		result := NewListRepositoriesInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewListRepositoriesOK creates a ListRepositoriesOK with default headers values
func NewListRepositoriesOK() *ListRepositoriesOK {
	return &ListRepositoriesOK{}
}

/*ListRepositoriesOK handles this case with default header values.

Get repositories successfully.
*/
type ListRepositoriesOK struct {
	/*Link refers to the previous page and next page
	 */
	Link string
	/*The total count of repositories
	 */
	XTotalCount int64

	Payload []*models.Repository
}

func (o *ListRepositoriesOK) Error() string {
	return fmt.Sprintf("[GET /repositories][%d] listRepositoriesOK  %+v", 200, o.Payload)
}

func (o *ListRepositoriesOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header Link
	o.Link = response.GetHeader("Link")

	// response header X-Total-Count
	xTotalCount, err := swag.ConvertInt64(response.GetHeader("X-Total-Count"))
	if err != nil {
		return errors.InvalidType("X-Total-Count", "header", "int64", response.GetHeader("X-Total-Count"))
	}
	o.XTotalCount = xTotalCount

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListRepositoriesBadRequest creates a ListRepositoriesBadRequest with default headers values
func NewListRepositoriesBadRequest() *ListRepositoriesBadRequest {
	return &ListRepositoriesBadRequest{}
}

/*ListRepositoriesBadRequest handles this case with default header values.

Invalid project ID.
*/
type ListRepositoriesBadRequest struct {
}

func (o *ListRepositoriesBadRequest) Error() string {
	return fmt.Sprintf("[GET /repositories][%d] listRepositoriesBadRequest ", 400)
}

func (o *ListRepositoriesBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewListRepositoriesForbidden creates a ListRepositoriesForbidden with default headers values
func NewListRepositoriesForbidden() *ListRepositoriesForbidden {
	return &ListRepositoriesForbidden{}
}

/*ListRepositoriesForbidden handles this case with default header values.

Project is not public or current user is irrelevant to the repository.
*/
type ListRepositoriesForbidden struct {
}

func (o *ListRepositoriesForbidden) Error() string {
	return fmt.Sprintf("[GET /repositories][%d] listRepositoriesForbidden ", 403)
}

func (o *ListRepositoriesForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewListRepositoriesNotFound creates a ListRepositoriesNotFound with default headers values
func NewListRepositoriesNotFound() *ListRepositoriesNotFound {
	return &ListRepositoriesNotFound{}
}

/*ListRepositoriesNotFound handles this case with default header values.

Project ID does not exist.
*/
type ListRepositoriesNotFound struct {
}

func (o *ListRepositoriesNotFound) Error() string {
	return fmt.Sprintf("[GET /repositories][%d] listRepositoriesNotFound ", 404)
}

func (o *ListRepositoriesNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewListRepositoriesInternalServerError creates a ListRepositoriesInternalServerError with default headers values
func NewListRepositoriesInternalServerError() *ListRepositoriesInternalServerError {
	return &ListRepositoriesInternalServerError{}
}

/*ListRepositoriesInternalServerError handles this case with default header values.

Unexpected internal errors.
*/
type ListRepositoriesInternalServerError struct {
}

func (o *ListRepositoriesInternalServerError) Error() string {
	return fmt.Sprintf("[GET /repositories][%d] listRepositoriesInternalServerError ", 500)
}

func (o *ListRepositoriesInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
